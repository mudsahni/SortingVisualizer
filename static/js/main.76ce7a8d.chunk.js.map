{"version":3,"sources":["util/helper.ts","components/atoms/Bar/index.tsx","components/molecules/Chart/constants.tsx","components/molecules/Chart/index.tsx","components/molecules/Playbar2/index.tsx","algorithms/BubbleSort.ts","algorithms/SelectionSort.ts","algorithms/InsertionSort.ts","components/atoms/Backdrop/index.tsx","components/atoms/Legend/index.tsx","components/molecules/LegendBar/index.tsx","components/atoms/ProgressBar/index.tsx","components/organisms/DynamicChart/index.tsx","components/organisms/DynamicChart/constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getRandomArray","n","min","max","array","i","push","Math","floor","random","Bar","value","height","width","margin","color","barStyle","marginRight","background","barTextStyle","paddingRight","className","style","BAR_CONSTANTS","Chart","highlightIndex","comparisonIndex","onGoing","onPause","groupIndices","length","getBarColor","ix","hIndex","map","getBarDimensions","bar","key","Playbar","isSorted","getOriginalState","decreaseSpeed","increaseSpeed","sortArray","generateNewArray","getSortedState","pauseSorting","Popup","trigger","Button","type","size","onClick","Icon","name","content","basic","disabled","BubbleSort","trace","sortedArray","j","arrayState","currentIndex","unsortedIndex","SelectionSort","min_idx","InsertionSort","Backdrop","children","Legend","LegendBar","ProgressBar","DynamicChart","randomArray","React","setArray","setArrayState","setCurrentIndex","setComparisonIndex","setUnsortedIndex","setIsSorted","speed","setSpeed","setOnGoing","setTrace","traceId","setTraceId","pause","setPause","getAlgorithmName","func","algorithm","setAlgorithm","useStateWithCallbackLazy","count","timer","setTimeout","changeVisualState","clearTimeout","setCount","traceObject","console","log","selectAlgorithm","_","data","Container","fluid","Dropdown","text","icon","floating","labeled","Menu","Header","option","Item","sort","a","b","App","Grid","stackable","centered","columns","Row","Column","Segment","Placeholder","Line","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.76ce7a8d.chunk.js","sourcesContent":["\nexport const getRandomArray = (n: number, min: number, max: number) => {\n    let array: number[] = []\n    for (let i = 0; i < n; i++) {\n        array.push(min + Math.floor(Math.random() * max))\n    }\n    return [...array]\n}\n\nexport const standardize = (x: number, min: number, max: number) => {\n    return (x - min) / (max - min)\n}","import * as React from 'react'\nimport './style.css'\n\ninterface BarProps {\n    height: number;\n    value: number;\n    margin: number;\n    width: number;\n    color: \"primary-highlight\" | \"secondary-highlight\" | \"default\" | \"group-highlight\";\n}\n\nexport const Bar: React.FC<BarProps> = ({ value, height, width, margin, color }) => {\n    const barStyle = {\n        height: `${height}px`,\n        marginRight: `${margin}vw`,\n        // padding: `${margin}rem`,\n        width: `${width}vw`,\n        background: `var(--bar-color-${color})`\n    }\n\n    const barTextStyle = {\n        paddingRight: `${margin}vw`\n    }\n    return (\n        <div className=\"bar-container\">\n            <div className=\"bar\" style={barStyle}>\n            </div>\n            <span className=\"bar-value\" style={barTextStyle}>{value}</span>\n        </div>\n\n    );\n}","export const BAR_CONSTANTS = {\n    barWidthBase: 20,\n    barMarginRightBase: 12,\n    barHeightBase: 3\n}","import * as React from 'react'\nimport BarType from '../../../typings/Bar';\n\nimport { Bar } from '../../atoms/Bar';\nimport { BAR_CONSTANTS } from './constants'\nimport './style.css';\n\ninterface ChartProps {\n    array: number[];\n    highlightIndex: number;\n    comparisonIndex: number;\n    groupIndices?: { max: number, min: number };\n    onGoing: boolean;\n    onPause: boolean;\n}\n\nconst Chart: React.FC<ChartProps> = ({ array, highlightIndex, comparisonIndex, onGoing, onPause, groupIndices }) => {\n    const n: number = array.length\n\n    const getBarColor = (ix: number, hIndex: number, comparisonIndex: number,\n        groupIndices: { max: number, min: number } | undefined) => {\n        if (ix === hIndex && (onGoing || onPause)) return 'primary-highlight'\n        // else if (ix === hIndex - 2) return 'secondary-highlight'\n        else if (ix === comparisonIndex && (onGoing || onPause)) return 'secondary-highlight'\n        else if (groupIndices && (ix >= groupIndices.min && ix <= groupIndices.max)\n            && (onGoing || onPause)) return 'group-highlight'\n        else return 'default'\n    }\n\n    const getBarDimensions = (array: number[]) => {\n        return array.map((value: number, ix: number) => {\n            return {\n                value: value,\n                height: BAR_CONSTANTS.barHeightBase * value\n            }\n        })\n    }\n\n    const generateBars = (bars: BarType.BarInput[]) => {\n        return (\n            bars.map((bar: BarType.BarInput, ix: number) =>\n                <Bar value={bar.value} key={ix} height={bar.height}\n                    margin={BAR_CONSTANTS.barMarginRightBase / n}\n                    width={BAR_CONSTANTS.barWidthBase / n} color={\n                        getBarColor(\n                            ix, highlightIndex,\n                            comparisonIndex, groupIndices\n                        )\n                    } />)\n        )\n    }\n\n    return (\n        <div className=\"chart-area\">\n            {generateBars(getBarDimensions(array))}\n            {/* <div className=\"sorted\">\n                SORTED\n            </div> */}\n        </div>\n    );\n}\n\nexport default Chart","import * as React from 'react'\nimport { Button, Icon, Popup } from 'semantic-ui-react'\nimport './style.css'\n\ninterface PlaybarProps {\n    isSorted: boolean;\n    onGoing: boolean;\n    onPause: boolean;\n    getOriginalState: () => any;\n    decreaseSpeed: () => any;\n    generateNewArray: () => any;\n    sortArray: () => any;\n    increaseSpeed: () => any;\n    getSortedState: () => any;\n    pauseSorting: () => any;\n\n}\n\nconst Playbar: React.FC<PlaybarProps> = ({\n    isSorted, onPause, onGoing, getOriginalState,\n    decreaseSpeed, increaseSpeed, sortArray,\n    generateNewArray, getSortedState, pauseSorting }) => {\n    return (\n\n        <div className=\"button-area\">\n            <Popup\n                trigger={<Button type=\"reset\" size=\"small\" onClick={generateNewArray} className=\"other-button\"  ><Icon name='random' /></Button>}\n                content=\"Generate a new array.\"\n                basic\n            />\n            <Popup\n                trigger={<Button type=\"submit\" size=\"small\" onClick={getOriginalState} className=\"other-button\" ><Icon name='fast backward' /></Button>}\n                content=\"Go back to the unsorted state.\"\n                basic\n            />\n            <Popup\n                trigger={<Button type=\"submit\" size=\"small\" onClick={decreaseSpeed} className=\"other-button\" disabled={isSorted}>x/2</Button>}\n                content=\"Decrease sorting speed.\"\n                basic\n            />\n            {!onGoing ? <Popup\n                trigger={<Button type=\"submit\" size=\"massive\" onClick={sortArray} className=\"play-button sort-button\" disabled={isSorted || onGoing}><Icon name='play' /></Button>}\n                content=\"Run sorting.\"\n                basic\n            /> : <Popup\n                    trigger={<Button type=\"submit\" size=\"massive\" onClick={() => pauseSorting()} className=\"play-button pause-button\"  ><Icon name='pause' /></Button>}\n                    content=\"Pause sorting.\"\n                    basic\n                />}\n            <Popup\n                trigger={<Button type=\"submit\" size=\"small\" onClick={increaseSpeed} className=\"other-button\" disabled={isSorted}>2x</Button>}\n                content=\"Increase sorting speed.\"\n                basic\n            />\n            <Popup\n                trigger={<Button type=\"submit\" size=\"small\" onClick={getSortedState} className=\"other-button\" disabled={isSorted}><Icon name='fast forward' /></Button>}\n                content=\"Finish sorting.\"\n                basic\n            />\n\n\n\n        </div>\n\n    );\n}\n\nexport default Playbar\n\n//     < Dropdown\n// text = \"Algorithms\"\n// icon = \"filter\"\n// className = 'icon'\n// floating\n// labeled\n// button\n\n// style = {{ marginTop: '1rem', background: '#21ba45', color: '#fff', alignSelf: \"flex-start\" }}\n//                 >\n//     <Dropdown.Menu>\n//         {/* <Dropdown.Header icon=\"chevron\"></Dropdown.Header> */}\n//         <Dropdown.Item>Bubble Sort</Dropdown.Item>\n\n//     </Dropdown.Menu>\n//                 </Dropdown >\n","// const BubbleSort = (array: number[], currentTrace: { [key: string]: { value: any, func: any } }) => {\n//     let sortStepArray: number[] = [...array]\n//     // let trace: any[][] = []\n//     if (sortStepArray.length === currentTrace.unsortedIndex.value) {\n//         // trace.push([-1, currentTrace.unsortedIndex.func])\n//         // trace.push([-1, currentTrace.currentIndex.func])\n//         // trace.push([true, currentTrace.isSorted.func])\n//         // return trace\n//         currentTrace.unsortedIndex.func(-1)\n//         currentTrace.currentIndex.func(-1)\n//         currentTrace.comparisonIndex.func(-1)\n//         currentTrace.isSorted.func(true)\n//     } else if (currentTrace.currentIndex.value >=\n//         sortStepArray.length - currentTrace.unsortedIndex.value) {\n//         // trace.push([1, currentTrace.currentIndex.func])\n//         // trace.push([currentTrace.unsortedIndex.value + 1, currentTrace.unsortedIndex.func])\n//         currentTrace.currentIndex.func(1)\n//         currentTrace.comparisonIndex.func(1)\n//         currentTrace.unsortedIndex.func(currentTrace.unsortedIndex.value + 1)\n//     } else {\n//         if (sortStepArray[currentTrace.currentIndex.value - 1] > sortStepArray[currentTrace.currentIndex.value]) {\n//             [sortStepArray[currentTrace.currentIndex.value - 1], sortStepArray[currentTrace.currentIndex.value]] =\n//                 [sortStepArray[currentTrace.currentIndex.value], sortStepArray[currentTrace.currentIndex.value - 1]];\n//             currentTrace.arrayState.func([...sortStepArray])\n//         }\n//         currentTrace.currentIndex.func(currentTrace.currentIndex.value + 1)\n//         currentTrace.comparisonIndex.func(currentTrace.comparisonIndex.value + 1)\n//     }\n// }\n\nconst BubbleSort = (array: number[]) => {\n    const n: number = array.length\n    const trace: { [key: string]: any }[] = []\n    const sortedArray = [...array]\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            trace.push({\n                arrayState: [...sortedArray], currentIndex: j,\n                comparisonIndex: j + 1, unsortedIndex: n - i - 1,\n                isSorted: false\n            })\n            if (sortedArray[j] > sortedArray[j + 1]) {\n                [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]]\n                trace.push({\n                    arrayState: [...sortedArray], currentIndex: j + 1,\n                    comparisonIndex: j + 2, unsortedIndex: n - i - 1,\n                    isSorted: false\n                })\n\n            }\n        }\n    }\n    trace.push({\n        arrayState: [...sortedArray], currentIndex: -1,\n        comparisonIndex: -1, unsortedIndex: -1,\n        isSorted: true\n    })\n    return trace\n\n}\n\nexport default BubbleSort\n\n// const sortStep = () => {\n//     let sortStepArray: number[] = [...arrayState]\n//     if (sortStepArray.length === unsortedIndex) {\n//         setUnsortedIndex(-1)\n//         setCurrentIndex(-1)\n//         setIsSorted(true)\n//     } else if (currentIndex >= sortStepArray.length - unsortedIndex) {\n//         setCurrentIndex(1)\n//         setUnsortedIndex(unsortedIndex + 1)\n//     } else {\n//         if (sortStepArray[currentIndex - 1] > sortStepArray[currentIndex]) {\n//             [sortStepArray[currentIndex - 1], sortStepArray[currentIndex]] =\n//                 [sortStepArray[currentIndex], sortStepArray[currentIndex - 1]];\n//             setArrayState([...sortStepArray])\n//         }\n//         setCurrentIndex(currentIndex + 1)\n\n//     }\n\n\n// }\n","\n// const SelectionSort = (array: number[], currentTrace: { [key: string]: { value: any, func: any } }) => {\n//     let sortStepArray: number[] = [...array]\n\n//     if (currentTrace.unsortedIndex.value === sortStepArray.length) {\n//         currentTrace.unsortedIndex.func(-1)\n//         currentTrace.currentIndex.func(-1)\n//         currentTrace.comparisonIndex.func(-1)\n//         currentTrace.isSorted.func(true)\n//     }\n//     else if (currentTrace.comparisonIndex.value < sortStepArray.length) {\n//         if (sortStepArray[currentTrace.currentIndex.value] > sortStepArray[currentTrace.comparisonIndex.value]) {\n//             currentTrace.currentIndex.func(currentTrace.comparisonIndex.value)\n//             currentTrace.comparisonIndex.func(currentTrace.comparisonIndex.value + 1)\n//             // currentTrace.unsortedIndex.func(currentTrace.unsortedIndex.value + 1)\n//         } else {\n//             currentTrace.comparisonIndex.func(currentTrace.comparisonIndex.value + 1)\n//         }\n//     } else {\n//         if (currentTrace.currentIndex.value !== currentTrace.unsortedIndex.value) {\n//             [sortStepArray[currentTrace.unsortedIndex.value], sortStepArray[currentTrace.currentIndex.value]] =\n//                 [sortStepArray[currentTrace.currentIndex.value], sortStepArray[currentTrace.unsortedIndex.value]]\n\n//             currentTrace.arrayState.func([...sortStepArray])\n//             currentTrace.currentIndex.func(currentTrace.unsortedIndex.value + 1)\n//             currentTrace.unsortedIndex.func(currentTrace.unsortedIndex.value + 1)\n//             currentTrace.comparisonIndex.func(currentTrace.currentIndex.value + 1)\n//         } else {\n//             currentTrace.currentIndex.func(currentTrace.unsortedIndex.value + 1)\n//             currentTrace.unsortedIndex.func(currentTrace.unsortedIndex.value + 1)\n//             currentTrace.comparisonIndex.func(currentTrace.currentIndex.value + 1)\n//         }\n//     }\n\n// }\n\nconst SelectionSort = (array: number[]) => {\n    const n: number = array.length\n    const trace: { [key: string]: any }[] = []\n    const sortedArray: number[] = [...array]\n\n    for (let i = 0; i < n - 1; i++) {\n        let min_idx: number = i\n        // trace.push({\n        //     arrayState: [...sortedArray], currentIndex: min_idx,\n        //     unsortedIndex: i, comparisonIndex: min_idx + 1, isSorted: false\n        // })\n\n        for (let j = i + 1; j < n; j++) {\n            trace.push({\n                arrayState: [...sortedArray], currentIndex: min_idx,\n                unsortedIndex: i, comparisonIndex: j, isSorted: false\n            })\n            if (sortedArray[min_idx] > sortedArray[j]) {\n                trace.push({\n                    arrayState: [...sortedArray], currentIndex: min_idx,\n                    unsortedIndex: i, comparisonIndex: j, isSorted: false\n                })\n\n                min_idx = j\n                trace.push({\n                    arrayState: [...sortedArray], currentIndex: min_idx,\n                    unsortedIndex: i, comparisonIndex: j + 1, isSorted: false\n                })\n\n            }\n        }\n        trace.push({\n            arrayState: [...sortedArray], currentIndex: min_idx,\n            unsortedIndex: i, comparisonIndex: n, isSorted: false\n        });\n\n        [sortedArray[i], sortedArray[min_idx]] = [sortedArray[min_idx], sortedArray[i]]\n        trace.push({\n            arrayState: [...sortedArray], currentIndex: i,\n            unsortedIndex: i, comparisonIndex: i + 1, isSorted: false\n        })\n\n    }\n    trace.push({\n        arrayState: [...sortedArray], currentIndex: -1,\n        unsortedIndex: -1, comparisonIndex: -1, isSorted: true\n    })\n    return trace\n}\n\nexport default SelectionSort","\n\nconst InsertionSort = (array: number[]) => {\n    const n: number = array.length\n    const trace: { [key: string]: any }[] = []\n    const sortedArray: number[] = [...array]\n\n    for (let i = 1; i < n; i++) {\n        let key: number = sortedArray[i]\n        let j: number = i - 1\n        trace.push({\n            arrayState: [...sortedArray], currentIndex: j,\n            comparisonIndex: i, unsortedIndex: i, isSorted: false\n        })\n        while (j >= 0 && key < sortedArray[j]) {\n            trace.push({\n                arrayState: [...sortedArray], currentIndex: j,\n                comparisonIndex: j + 1, unsortedIndex: i, isSorted: false\n            })\n\n            sortedArray[j + 1] = sortedArray[j]\n            j -= 1\n            trace.push({\n                arrayState: [...sortedArray], currentIndex: j,\n                comparisonIndex: j + 1, unsortedIndex: i, isSorted: false\n            })\n\n        }\n        trace.push({\n            arrayState: [...sortedArray], currentIndex: j,\n            comparisonIndex: j + 1, unsortedIndex: i, isSorted: false\n        })\n\n        sortedArray[j + 1] = key\n        trace.push({\n            arrayState: [...sortedArray], currentIndex: j + 1,\n            comparisonIndex: j + 2, unsortedIndex: i, isSorted: false\n        })\n\n    }\n    trace.push({\n        arrayState: [...sortedArray], currentIndex: -1,\n        comparisonIndex: -1, unsortedIndex: -1, isSorted: true\n    })\n\n\n    return trace\n}\n\nexport default InsertionSort","import React from 'react'\nimport { Segment } from 'semantic-ui-react';\nimport './style.css'\n\ninterface BackdropProps {\n}\n\nconst Backdrop: React.FC<BackdropProps> = ({ children }) => {\n    const style = {\n        justifyContent: \"flex-end\",\n        height: \"50vh\"\n    }\n    return (\n        <div>\n            {children}\n        </div>\n    );\n}\n\nexport default Backdrop","import React from 'react'\nimport { Icon } from 'semantic-ui-react'\nimport './style.css'\n\ninterface LegendProps {\n    color?: \"red\" | \"orange\" | \"yellow\" | \"olive\" |\n    \"green\" | \"teal\" | \"blue\" |\n    \"violet\" | \"purple\" | \"pink\" |\n    \"brown\" | \"grey\" | \"black\" | \"white\";\n}\n\nexport const Legend: React.FC<LegendProps> = ({ color = \"white\", children }) => {\n    return (\n\n        <div className=\"legend-icon-container\">\n            {   color === 'white' ? <Icon name=\"square\" className=\"legend-icon\"></Icon> :\n                <Icon name=\"square\" color={color} className=\"legend-icon\"></Icon>\n            }\n            {children}\n        </div>\n    );\n}","import React from 'react'\nimport './style.css'\n\ninterface LegendBarProps {\n\n}\n\nexport const LegendBar: React.FC<LegendBarProps> = ({ children }) => {\n    return (\n\n        <div className=\"legend-bar\">\n            {children}\n        </div>\n    );\n}","import React from 'react'\nimport './style.css'\ninterface ProgressBarProps {\n    width: number;\n}\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({ width }) => {\n\n    const style = () => {\n        let styleObject: { [key: string]: string } = { width: `${width}%` }\n        return styleObject\n    }\n\n\n\n    return (\n\n        <div className=\"progress-bar-container\">\n            <div className=\"progress-bar\" style={style()}>\n\n            </div>\n        </div>\n    );\n}\n\nexport default ProgressBar","import * as React from 'react'\nimport { Button, Container, Divider, Dropdown, Icon, Segment } from 'semantic-ui-react';\nimport Chart from '../../molecules/Chart';\n// import Playbar from '../../molecules/Playbar';\nimport Playbar from '../../molecules/Playbar2';\n\nimport ChartType from '../../../typings/Chart'\nimport useStateWithCallbackLazy from 'use-state-with-callback';\nimport './style.css'\nimport { getRandomArray } from '../../../util/helper';\nimport BubbleSort from '../../../algorithms/BubbleSort'\nimport SelectionSort from '../../../algorithms/SelectionSort';\nimport InsertionSort from '../../../algorithms/InsertionSort'\n// import MergeSort from '../../../algorithms/MergeSort';\n\nimport { DEFAULT_SPEED } from './constants';\nimport Backdrop from '../../atoms/Backdrop';\nimport { Legend } from '../../atoms/Legend';\nimport { LegendBar } from '../../molecules/LegendBar';\nimport ProgressBar from '../../atoms/ProgressBar';\ninterface DynamicChartProps {\n    randomArray: number[];\n}\n\n\nconst DynamicChart: React.FC<DynamicChartProps> = ({ randomArray }) => {\n    const [array, setArray] = React.useState<number[]>(randomArray)\n    // let array: number[] = [...randomArray]\n    // const randomArray = (): number[] => getRandomArray(30, 0, 100);\n    // const array = [...randomArray()]\n    const [arrayState, setArrayState] = React.useState<number[]>(array)\n    const [currentIndex, setCurrentIndex] = React.useState<number>(0)\n    const [comparisonIndex, setComparisonIndex] = React.useState<number>(0)\n    const [unsortedIndex, setUnsortedIndex] = React.useState<number>(0)\n    const [isSorted, setIsSorted] = React.useState<boolean>(false)\n    const [speed, setSpeed] = React.useState<number>(DEFAULT_SPEED)\n    const [onGoing, setOnGoing] = React.useState<boolean>(false)\n    const [trace, setTrace] = React.useState<{ [key: string]: any }[]>([])\n    const [traceId, setTraceId] = React.useState<number>(0)\n    const [pause, setPause] = React.useState<boolean>(false)\n    const [groupIndices, setGroupIndices] = React.useState<{ max: number, min: number }>({ max: -1, min: -1 })\n\n    const getAlgorithmName = (name: string) => {\n        return (\n            <span><span className=\"algorithm-name\">{name}</span> SORT</span>\n        )\n    }\n    const [algorithm, setAlgorithm] = React.useState<any>({ name: (getAlgorithmName(\"BUBBLE\")), func: BubbleSort })\n    // const [count, setCount] = useStateWithCallbackLazy(0, (count: number) => {\n    //     if (count > 0 && isSorted === false) {\n    //         const timer = setTimeout(BubbleSort, speed, arrayState, traceObject)\n    //         return () => clearTimeout(timer)\n    //     } else {\n    //         setOnGoing(false)\n    //     }\n    // })\n\n    const [count, setCount] = useStateWithCallbackLazy(0, (count: number) => {\n        if (count > 0 && isSorted === false) {\n            if (trace.length > 0 && traceId <= trace.length - 1) {\n                const timer = setTimeout(changeVisualState, speed, trace[traceId])\n                return () => clearTimeout(timer)\n            }\n        }\n        else {\n            if (pause) {\n                setOnGoing(false)\n            } else {\n                setOnGoing(false)\n            }\n        }\n    })\n\n\n    const changeVisualState = (traceObject: { [key: string]: any }) => {\n        console.log(traceObject)\n        setCurrentIndex(traceObject.currentIndex)\n        setComparisonIndex(traceObject.comparisonIndex)\n        setUnsortedIndex(traceObject.unsortedIndex)\n        setArrayState([...traceObject.arrayState])\n        setIsSorted(traceObject.isSorted)\n        setTraceId(traceId + 1)\n\n    }\n\n\n    const increaseSpeed = () => {\n        setSpeed(speed / 2)\n    }\n\n    const decreaseSpeed = () => {\n        setSpeed(speed * 2)\n    }\n    const generateNewArray = () => {\n        setArray([...getRandomArray(30, 0, 100)])\n        setArrayState(array)\n        setIsSorted(false)\n        setOnGoing(false)\n        setCurrentIndex(0)\n        setComparisonIndex(0)\n        setUnsortedIndex(0)\n        setCount(0)\n        setSpeed(speed)\n        setTraceId(0)\n        setTrace([])\n        setPause(false)\n    }\n\n\n\n    const sortRun = () => {\n        setOnGoing(true)\n        setPause(false)\n        if (!(trace.length > 0)) {\n            const trace: { [key: string]: any }[] = algorithm.func([...arrayState])\n            setTrace([...trace])\n        }\n        setCount(count + 1)\n    }\n\n    // const sortRun = () => {\n    //     console.log(arrayState)\n\n    //     let sortRunArray: number[] = [...arrayState];\n    //     for (let i = 1; i < sortRunArray.length; i++) {\n\n    //         if (sortRunArray[i - 1] > sortRunArray[i]) {\n    //             setTimeout(sortStep, 1000, i - 1, i)\n    //             sortRunArray = [...arrayState]\n    //             // [sortRunArray[i - 1], sortRunArray[i]] = [sortRunArray[i], sortRunArray[i - 1]];\n\n    //         } else {\n    //             sortRunArray = [...arrayState]\n    //         }\n    //     }\n\n    //     setArrayState([...sortRunArray])\n    // }\n\n    const pauseSorting = () => {\n        setPause(true)\n        setCount(0)\n    }\n\n    const getSortedState = () => {\n        const sortedArray = [...arrayState].sort((a, b) => a - b)\n        setArrayState(sortedArray)\n        setIsSorted(true)\n        setOnGoing(false)\n        setCurrentIndex(0)\n        setComparisonIndex(0)\n        setUnsortedIndex(0)\n        setCount(0)\n        setSpeed(speed)\n        setTraceId(sortedArray.length)\n        setTraceId(0)\n\n    }\n\n    const getOriginalState = () => {\n        setArrayState([...array])\n        setIsSorted(false)\n        setOnGoing(false)\n        setCurrentIndex(0)\n        setComparisonIndex(0)\n        setUnsortedIndex(0)\n        setCount(0)\n        setSpeed(DEFAULT_SPEED)\n        setTraceId(0)\n        setTraceId(0)\n\n\n    }\n    const options = [{ value: \"Bubble Sort\", key: \"bubble\", text: \"Bubble Sort\" },\n    { value: \"Insertion Sort\", key: \"insertionSort\", text: \"Insertion Sort\" }, { value: \"Selection Sort\", key: \"selectionSort\", text: \"Selection Sort\" },\n    { value: \"Merge Sort\", key: \"mergeSort\", text: \"Merge Sort\" }]\n\n    const selectAlgorithm = (_: React.SyntheticEvent, data: any) => {\n        if (data.value === \"Bubble Sort\") {\n            setAlgorithm({ name: getAlgorithmName(\"BUBBLE\"), func: BubbleSort })\n        } else if (data.value === \"Insertion Sort\") {\n            setAlgorithm({ name: getAlgorithmName(\"INSERTION\"), func: InsertionSort })\n        } else if (data.value === \"Selection Sort\") {\n            setAlgorithm({ name: getAlgorithmName(\"SELECTION\"), func: SelectionSort })\n            // } else if (data.value === \"Merge Sort\") {\n            //     setAlgorithm({ name: \"Merge Sort\", func: MergeSort })\n        } else {\n            setAlgorithm({ name: getAlgorithmName(\"BUBBLE\"), func: BubbleSort })\n        }\n\n        getOriginalState()\n    }\n\n    return (\n        <>\n            <Container fluid className=\"chart-container\">\n\n                <div className=\"sort-selection\">\n\n                    <Dropdown\n                        text={algorithm.name}\n                        icon='dropdown'\n                        floating\n                        labeled\n                        disabled={onGoing && true}\n                        className='icon'\n                    >\n                        <Dropdown.Menu>\n                            <Dropdown.Header content='Algorithms' />\n                            {options.map((option) => (\n                                <Dropdown.Item onClick={selectAlgorithm} {...option} />\n                            ))}\n\n                        </Dropdown.Menu>\n                    </Dropdown>\n                    <LegendBar>\n                        <Legend color=\"green\"><span>Current Index</span></Legend>\n                        <Legend color=\"yellow\"><span>Comparison Index</span></Legend>\n                        <Legend><span>Default</span></Legend>\n\n                    </LegendBar>\n\n                </div>\n\n                <Backdrop>\n                    <Chart array={arrayState} highlightIndex={currentIndex} comparisonIndex={comparisonIndex}\n                        onGoing={onGoing} onPause={pause} groupIndices={groupIndices} />\n                    <ProgressBar width={onGoing || pause ? (100 / trace.length) * traceId : 0}></ProgressBar>\n\n                </Backdrop>\n            </Container>\n            <Playbar getOriginalState={getOriginalState} getSortedState={getSortedState} isSorted={isSorted}\n                onPause={pause} onGoing={onGoing} decreaseSpeed={decreaseSpeed} increaseSpeed={increaseSpeed}\n                generateNewArray={generateNewArray} sortArray={sortRun} pauseSorting={pauseSorting}></Playbar>\n\n        </>\n    );\n}\n\nexport default DynamicChart\n\n    // < div className = \"button-area\" >\n    //     <Button.Group icon>\n\n    //         <Button type=\"reset\" onClick={resetState} color=\"green\" style={{ marginTop: '1rem' }} ><Icon name='refresh' /></Button>\n    //         <Button type=\"submit\" onClick={getOriginalState} color=\"green\" style={{ marginTop: '1rem' }}><Icon name='fast backward' /></Button>\n\n    //         <Button type=\"submit\" onClick={decreaseSpeed} color=\"green\" style={{ marginTop: '1rem' }} disabled={isSorted}><Icon name='step backward' /></Button>\n\n    //         {!onGoing ? <Button type=\"submit\" onClick={sortArray} color=\"green\" style={{ marginTop: '1rem' }} disabled={isSorted || onGoing}><Icon name='play' /></Button> :\n    //             <Button type=\"submit\" onClick={pauseSorting} color=\"red\" style={{ marginTop: '1rem' }} ><Icon name='pause' /></Button>}\n\n    //         <Button type=\"submit\" onClick={increaseSpeed} color=\"green\" style={{ marginTop: '1rem' }} disabled={isSorted}><Icon name='step forward' /></Button>\n    //         <Button type=\"submit\" onClick={getSortedState} color=\"green\" style={{ marginTop: '1rem' }} disabled={isSorted}><Icon name='fast forward' /></Button>\n\n    //     </Button.Group>\n    //         </div >\n","export const DEFAULT_SPEED: number = 1000","import * as React from 'react'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container, Grid, Image, Placeholder, Segment } from 'semantic-ui-react'\nimport Backdrop from './components/atoms/Backdrop';\nimport { Bar } from './components/atoms/Bar';\nimport './App.css'\nimport { getRandomArray } from './util/helper';\nimport DynamicChart from './components/organisms/DynamicChart';\n\ninterface AppProps {\n\n}\n\nexport const App: React.FC<AppProps> = ({ }) => {\n    const array: number[] = getRandomArray(10, 0, 100);\n\n    return (\n\n        <Grid stackable centered columns={12}>\n            <Grid.Row centered columns={1}>\n                <Grid.Column>\n\n                    <DynamicChart randomArray={array} />\n                    {/* <Segment placeholder>\n\n                        </Segment> */}\n                </Grid.Column>\n\n            </Grid.Row>\n            <Grid.Row centered columns={3}>\n                <Grid.Column>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n\n        </Grid>\n\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}