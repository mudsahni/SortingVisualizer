{"version":3,"sources":["components/atoms/Bar/index.tsx","components/molecules/Chart/constants.tsx","components/molecules/Chart/index.tsx","components/molecules/Playbar2/index.tsx","util/helper.ts","algorithms/BubbleSort.ts","algorithms/SelectionSort.ts","algorithms/InsertionSort.ts","algorithms/MergeSort.ts","components/atoms/Range/index.tsx","components/atoms/Backdrop/index.tsx","components/atoms/Legend/index.tsx","components/molecules/LegendBar/index.tsx","components/atoms/ProgressBar/index.tsx","components/organisms/DynamicChart/index.tsx","components/organisms/DynamicChart/constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Bar","value","height","width","margin","color","barStyle","marginRight","background","barTextStyle","paddingRight","className","style","BAR_CONSTANTS","Chart","array","highlightIndex","comparisonIndex","onGoing","onPause","groupIndices","n","length","getBarColor","ix","hIndex","min","max","map","getBarDimensions","bar","key","Playbar","isSorted","arraySize","getOriginalState","decreaseSpeed","increaseSpeed","sortArray","generateNewArray","getSortedState","pauseSorting","setHideRange","Popup","trigger","Button","type","size","onClick","Icon","name","content","basic","disabled","getRandomArray","i","push","Math","floor","random","BubbleSort","trace","sortedArray","j","arrayState","currentIndex","unsortedIndex","SelectionSort","min_idx","InsertionSort","MergeSort","mergeSort","sortingArray","left","right","tArray","slice","mid","round","merged","k","splice","merge","Range","range","hide","sizeRange","Array","keys","rangeStyle","visibility","num","Backdrop","children","Legend","LegendBar","ProgressBar","DynamicChart","React","setArraySize","hideRange","tarray","setArray","setArrayState","setCurrentIndex","setComparisonIndex","setUnsortedIndex","setIsSorted","speed","setSpeed","setOnGoing","setTrace","traceId","setTraceId","pause","setPause","setGroupIndices","getAlgorithmName","func","algorithm","setAlgorithm","useStateWithCallbackLazy","count","timer","setTimeout","changeVisualState","clearTimeout","setCount","traceObject","console","log","selectAlgorithm","_","data","Container","fluid","Dropdown","text","icon","floating","labeled","Menu","Header","option","Item","newArray","sort","a","b","App","Grid","stackable","centered","columns","Row","Column","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.659510d8.chunk.js","sourcesContent":["import * as React from 'react'\nimport './style.css'\n\ninterface BarProps {\n    height: number;\n    value: number;\n    margin: number;\n    width: number;\n    color: \"primary-highlight\" | \"secondary-highlight\" | \"default\" | \"group-highlight\";\n}\n\nexport const Bar: React.FC<BarProps> = ({ value, height, width, margin, color }) => {\n    const barStyle = {\n        height: `${height}px`,\n        marginRight: `${margin}vw`,\n        // padding: `${margin}rem`,\n        width: `${width}vw`,\n        background: `var(--bar-color-${color})`\n    }\n\n    const barTextStyle = {\n        paddingRight: `${margin}vw`\n    }\n    return (\n        <div className=\"bar-container\">\n            <div className=\"bar\" style={barStyle}>\n            </div>\n            <span className=\"bar-value\" style={barTextStyle}>{value}</span>\n        </div>\n\n    );\n}","export const BAR_CONSTANTS = {\n    barWidthBase: 20,\n    barMarginRightBase: 12,\n    barHeightBase: 3\n}","import * as React from 'react'\nimport BarType from '../../../typings/Bar';\n\nimport { Bar } from '../../atoms/Bar';\nimport { BAR_CONSTANTS } from './constants'\nimport './style.css';\n\ninterface ChartProps {\n    array: number[];\n    highlightIndex: number;\n    comparisonIndex: number;\n    groupIndices?: { max: number, min: number };\n    onGoing: boolean;\n    onPause: boolean;\n}\n\nconst Chart: React.FC<ChartProps> = ({ array, highlightIndex, comparisonIndex, onGoing, onPause, groupIndices }) => {\n    const n: number = array.length\n\n    const getBarColor = (ix: number, hIndex: number, comparisonIndex: number,\n        groupIndices: { max: number, min: number } | undefined) => {\n        if (ix === hIndex && (onGoing || onPause)) return 'primary-highlight'\n        // else if (ix === hIndex - 2) return 'secondary-highlight'\n        else if (ix === comparisonIndex && (onGoing || onPause)) return 'secondary-highlight'\n        else if (groupIndices && (ix >= groupIndices.min && ix <= groupIndices.max)\n            && (onGoing || onPause)) return 'group-highlight'\n        else return 'default'\n    }\n\n    const getBarDimensions = (array: number[]) => {\n        return array.map((value: number, ix: number) => {\n            return {\n                value: value,\n                height: BAR_CONSTANTS.barHeightBase * value\n            }\n        })\n    }\n\n    const generateBars = (bars: BarType.BarInput[]) => {\n        return (\n            bars.map((bar: BarType.BarInput, ix: number) =>\n                <Bar value={bar.value} key={ix} height={bar.height}\n                    margin={BAR_CONSTANTS.barMarginRightBase / n}\n                    width={BAR_CONSTANTS.barWidthBase / n} color={\n                        getBarColor(\n                            ix, highlightIndex,\n                            comparisonIndex, groupIndices\n                        )\n                    } />)\n        )\n    }\n\n    return (\n        <div className=\"chart-area\">\n            {generateBars(getBarDimensions(array))}\n            {/* <div className=\"sorted\">\n                SORTED\n            </div> */}\n        </div>\n    );\n}\n\nexport default Chart","import * as React from 'react'\nimport { Button, Icon, Popup } from 'semantic-ui-react'\nimport './style.css'\n\ninterface PlaybarProps {\n    isSorted: boolean;\n    onGoing: boolean;\n    onPause: boolean;\n    arraySize: number;\n    getOriginalState: () => any;\n    decreaseSpeed: () => any;\n    generateNewArray: () => any;\n    sortArray: () => any;\n    increaseSpeed: () => any;\n    getSortedState: () => any;\n    pauseSorting: () => any;\n    setHideRange: () => any;\n\n}\n\nconst Playbar: React.FC<PlaybarProps> = ({\n    isSorted, onPause, arraySize, onGoing, getOriginalState,\n    decreaseSpeed, increaseSpeed, sortArray,\n    generateNewArray, getSortedState, pauseSorting, setHideRange }) => {\n    return (\n\n        <div className=\"button-area\">\n            <Popup\n                trigger={<Button type=\"reset\" size=\"small\" onClick={generateNewArray} className=\"other-button\"  ><Icon name='random' /></Button>}\n                content=\"Generate a new array.\"\n                basic\n            />\n            <Popup\n                trigger={<Button type=\"submit\" size=\"small\" onClick={getOriginalState} className=\"other-button\" ><Icon name='fast backward' /></Button>}\n                content=\"Go back to the unsorted state.\"\n                basic\n            />\n            <Popup\n                trigger={<Button type=\"submit\" size=\"small\" onClick={decreaseSpeed} className=\"other-button\" disabled={isSorted}>x/2</Button>}\n                content=\"Decrease sorting speed.\"\n                basic\n            />\n            {!onGoing ? <Popup\n                trigger={<Button type=\"submit\" size=\"massive\" onClick={sortArray} className=\"play-button sort-button\" disabled={isSorted || onGoing}><Icon name='play' /></Button>}\n                content=\"Run sorting.\"\n                basic\n            /> : <Popup\n                    trigger={<Button type=\"submit\" size=\"massive\" onClick={() => pauseSorting()} className=\"play-button pause-button\"  ><Icon name='pause' /></Button>}\n                    content=\"Pause sorting.\"\n                    basic\n                />}\n            <Popup\n                trigger={<Button type=\"submit\" size=\"small\" onClick={increaseSpeed} className=\"other-button\" disabled={isSorted}>2x</Button>}\n                content=\"Increase sorting speed.\"\n                basic\n            />\n            <Popup\n                trigger={<Button type=\"submit\" size=\"small\" onClick={getSortedState} className=\"other-button\" disabled={isSorted}><Icon name='fast forward' /></Button>}\n                content=\"Finish sorting.\"\n                basic\n            />\n            <Popup\n                trigger={<Button type=\"submit\" size=\"small\" onClick={setHideRange} className=\"other-button\" disabled={onGoing}>{arraySize}</Button>}\n                content=\"Change array size.\"\n                basic\n            />\n\n        </div>\n\n\n    );\n}\n\nexport default Playbar\n\n//     < Dropdown\n// text = \"Algorithms\"\n// icon = \"filter\"\n// className = 'icon'\n// floating\n// labeled\n// button\n\n// style = {{ marginTop: '1rem', background: '#21ba45', color: '#fff', alignSelf: \"flex-start\" }}\n//                 >\n//     <Dropdown.Menu>\n//         {/* <Dropdown.Header icon=\"chevron\"></Dropdown.Header> */}\n//         <Dropdown.Item>Bubble Sort</Dropdown.Item>\n\n//     </Dropdown.Menu>\n//                 </Dropdown >\n","\nexport const getRandomArray = (n: number, min: number, max: number) => {\n    let array: number[] = []\n    for (let i = 0; i < n; i++) {\n        array.push(min + Math.floor(Math.random() * max))\n    }\n    return [...array]\n}\n\nexport const standardize = (x: number, min: number, max: number) => {\n    return (x - min) / (max - min)\n}","\nconst BubbleSort = (array: number[]) => {\n    const n: number = array.length\n    const trace: { [key: string]: any }[] = []\n    const sortedArray = [...array]\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            trace.push({\n                arrayState: [...sortedArray], currentIndex: j,\n                comparisonIndex: j + 1, unsortedIndex: n - i - 1,\n                isSorted: false\n            })\n            if (sortedArray[j] > sortedArray[j + 1]) {\n                [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]]\n                trace.push({\n                    arrayState: [...sortedArray], currentIndex: j + 1,\n                    comparisonIndex: j + 2, unsortedIndex: n - i - 1,\n                    isSorted: false\n                })\n\n            }\n        }\n    }\n    trace.push({\n        arrayState: [...sortedArray], currentIndex: -1,\n        comparisonIndex: -1, unsortedIndex: -1,\n        isSorted: true\n    })\n    return trace\n\n}\n\nexport default BubbleSort\n\n// const sortStep = () => {\n//     let sortStepArray: number[] = [...arrayState]\n//     if (sortStepArray.length === unsortedIndex) {\n//         setUnsortedIndex(-1)\n//         setCurrentIndex(-1)\n//         setIsSorted(true)\n//     } else if (currentIndex >= sortStepArray.length - unsortedIndex) {\n//         setCurrentIndex(1)\n//         setUnsortedIndex(unsortedIndex + 1)\n//     } else {\n//         if (sortStepArray[currentIndex - 1] > sortStepArray[currentIndex]) {\n//             [sortStepArray[currentIndex - 1], sortStepArray[currentIndex]] =\n//                 [sortStepArray[currentIndex], sortStepArray[currentIndex - 1]];\n//             setArrayState([...sortStepArray])\n//         }\n//         setCurrentIndex(currentIndex + 1)\n\n//     }\n\n\n// }\n","\n// const SelectionSort = (array: number[], currentTrace: { [key: string]: { value: any, func: any } }) => {\n//     let sortStepArray: number[] = [...array]\n\n//     if (currentTrace.unsortedIndex.value === sortStepArray.length) {\n//         currentTrace.unsortedIndex.func(-1)\n//         currentTrace.currentIndex.func(-1)\n//         currentTrace.comparisonIndex.func(-1)\n//         currentTrace.isSorted.func(true)\n//     }\n//     else if (currentTrace.comparisonIndex.value < sortStepArray.length) {\n//         if (sortStepArray[currentTrace.currentIndex.value] > sortStepArray[currentTrace.comparisonIndex.value]) {\n//             currentTrace.currentIndex.func(currentTrace.comparisonIndex.value)\n//             currentTrace.comparisonIndex.func(currentTrace.comparisonIndex.value + 1)\n//             // currentTrace.unsortedIndex.func(currentTrace.unsortedIndex.value + 1)\n//         } else {\n//             currentTrace.comparisonIndex.func(currentTrace.comparisonIndex.value + 1)\n//         }\n//     } else {\n//         if (currentTrace.currentIndex.value !== currentTrace.unsortedIndex.value) {\n//             [sortStepArray[currentTrace.unsortedIndex.value], sortStepArray[currentTrace.currentIndex.value]] =\n//                 [sortStepArray[currentTrace.currentIndex.value], sortStepArray[currentTrace.unsortedIndex.value]]\n\n//             currentTrace.arrayState.func([...sortStepArray])\n//             currentTrace.currentIndex.func(currentTrace.unsortedIndex.value + 1)\n//             currentTrace.unsortedIndex.func(currentTrace.unsortedIndex.value + 1)\n//             currentTrace.comparisonIndex.func(currentTrace.currentIndex.value + 1)\n//         } else {\n//             currentTrace.currentIndex.func(currentTrace.unsortedIndex.value + 1)\n//             currentTrace.unsortedIndex.func(currentTrace.unsortedIndex.value + 1)\n//             currentTrace.comparisonIndex.func(currentTrace.currentIndex.value + 1)\n//         }\n//     }\n\n// }\n\nconst SelectionSort = (array: number[]) => {\n    const n: number = array.length\n    const trace: { [key: string]: any }[] = []\n    const sortedArray: number[] = [...array]\n\n    for (let i = 0; i < n - 1; i++) {\n        let min_idx: number = i\n        // trace.push({\n        //     arrayState: [...sortedArray], currentIndex: min_idx,\n        //     unsortedIndex: i, comparisonIndex: min_idx + 1, isSorted: false\n        // })\n\n        for (let j = i + 1; j < n; j++) {\n            trace.push({\n                arrayState: [...sortedArray], currentIndex: min_idx,\n                unsortedIndex: i, comparisonIndex: j, isSorted: false\n            })\n            if (sortedArray[min_idx] > sortedArray[j]) {\n                trace.push({\n                    arrayState: [...sortedArray], currentIndex: min_idx,\n                    unsortedIndex: i, comparisonIndex: j, isSorted: false\n                })\n\n                min_idx = j\n                trace.push({\n                    arrayState: [...sortedArray], currentIndex: min_idx,\n                    unsortedIndex: i, comparisonIndex: j + 1, isSorted: false\n                })\n\n            }\n        }\n        trace.push({\n            arrayState: [...sortedArray], currentIndex: min_idx,\n            unsortedIndex: i, comparisonIndex: n, isSorted: false\n        });\n\n        [sortedArray[i], sortedArray[min_idx]] = [sortedArray[min_idx], sortedArray[i]]\n        trace.push({\n            arrayState: [...sortedArray], currentIndex: i,\n            unsortedIndex: i, comparisonIndex: i + 1, isSorted: false\n        })\n\n    }\n    trace.push({\n        arrayState: [...sortedArray], currentIndex: -1,\n        unsortedIndex: -1, comparisonIndex: -1, isSorted: true\n    })\n    return trace\n}\n\nexport default SelectionSort","\n\nconst InsertionSort = (array: number[]) => {\n    const n: number = array.length\n    const trace: { [key: string]: any }[] = []\n    const sortedArray: number[] = [...array]\n\n    for (let i = 1; i < n; i++) {\n        let key: number = sortedArray[i]\n        let j: number = i - 1\n        trace.push({\n            arrayState: [...sortedArray], currentIndex: j,\n            comparisonIndex: i, unsortedIndex: i, isSorted: false\n        })\n        while (j >= 0 && key < sortedArray[j]) {\n            trace.push({\n                arrayState: [...sortedArray], currentIndex: j,\n                comparisonIndex: j + 1, unsortedIndex: i, isSorted: false\n            })\n\n            sortedArray[j + 1] = sortedArray[j]\n            j -= 1\n            trace.push({\n                arrayState: [...sortedArray], currentIndex: j,\n                comparisonIndex: j + 1, unsortedIndex: i, isSorted: false\n            })\n\n        }\n        trace.push({\n            arrayState: [...sortedArray], currentIndex: j,\n            comparisonIndex: j + 1, unsortedIndex: i, isSorted: false\n        })\n\n        sortedArray[j + 1] = key\n        trace.push({\n            arrayState: [...sortedArray], currentIndex: j + 1,\n            comparisonIndex: j + 2, unsortedIndex: i, isSorted: false\n        })\n\n    }\n    trace.push({\n        arrayState: [...sortedArray], currentIndex: -1,\n        comparisonIndex: -1, unsortedIndex: -1, isSorted: true\n    })\n\n\n    return trace\n}\n\nexport default InsertionSort","\nconst MergeSort = (array: number[]) => {\n    const trace: { [key: string]: any }[] = []\n    const original: number[] = [...array]\n    const currentStartIndex: number = 0\n\n    // const merge = (left: number[], right: number[]): number[] => {\n    //     let merged: number[] = []\n    //     let i: number = 0; let j: number = 0; let k: number = 0;\n    //     const ln: number = left.length; const rn: number = right.length;\n\n    //     while (i < ln && j < rn) {\n    //         if (left[i] < right[j]) {\n    //             merged[k] = left[i]\n    //             i += 1\n    //         } else {\n    //             merged[k] = right[j]\n    //             j += 1\n    //         }\n    //         k += 1\n    //     }\n\n    //     while (i < ln) {\n    //         merged[k] = left[i]\n    //         i += 1\n    //         k += 1\n    //     }\n\n    //     while (j < rn) {\n    //         merged[k] = right[j]\n    //         j += 1\n    //         k += 1\n    //     }\n\n    //     return merged\n    // }\n\n    // const mergeSort = (sortingArray: number[]) => {\n\n    //     if (sortingArray.length <= 1) {\n    //         return sortingArray\n    //     } else {\n    //         const n: number = sortingArray.length\n    //         const mid: number = Math.round(n / 2)\n    //         const left: number[] = mergeSort(sortingArray.slice(0, mid))\n    //         const right: number[] = mergeSort(sortingArray.slice(mid, n))\n    //         return merge(left, right)\n    //     }\n    // }\n\n    const merge = (sortingArray: number[], left: number, mid: number, right: number) => {\n        // console.log(`${left}...${mid}...${right}`)\n        // console.log(sortingArray.slice(left, mid))\n        // console.log('---')\n        // console.log(sortingArray.slice(mid, right))\n        const merged: number[] = []\n        let i: number = left; let j: number = mid; let k: number = 0;\n\n        while (i < mid && j < right) {\n            if (sortingArray[i] < sortingArray[j]) {\n                trace.push({ arrayState: [...sortingArray], currentIndex: i, comparisonIndex: j, unsortedIndex: -1, groupIndices: { max: -1, min: -1 }, isSorted: false })\n                merged[k] = sortingArray[i]\n                trace.push({ arrayState: [...sortingArray], currentIndex: i, comparisonIndex: j, unsortedIndex: -1, groupIndices: { max: -1, min: -1 }, isSorted: false })\n                i += 1\n            } else {\n                trace.push({ arrayState: [...sortingArray], currentIndex: j, comparisonIndex: i, unsortedIndex: -1, groupIndices: { max: -1, min: -1 }, isSorted: false })\n                merged[k] = sortingArray[j]\n                trace.push({ arrayState: [...sortingArray], currentIndex: j, comparisonIndex: i, unsortedIndex: -1, groupIndices: { max: -1, min: -1 }, isSorted: false })\n\n                j += 1\n            }\n            k += 1\n        }\n\n        while (i < mid) {\n            trace.push({ arrayState: [...sortingArray], currentIndex: i, comparisonIndex: -1, unsortedIndex: -1, groupIndices: { max: -1, min: -1 }, isSorted: false })\n            merged[k] = sortingArray[i]\n            trace.push({ arrayState: [...sortingArray], currentIndex: i, comparisonIndex: -1, unsortedIndex: -1, groupIndices: { max: -1, min: -1 }, isSorted: false })\n            i += 1\n            k += 1\n        }\n\n        while (j < right) {\n            trace.push({ arrayState: [...sortingArray], currentIndex: j, comparisonIndex: -1, unsortedIndex: -1, groupIndices: { max: -1, min: -1 }, isSorted: false })\n            merged[k] = sortingArray[j]\n            trace.push({ arrayState: [...sortingArray], currentIndex: j, comparisonIndex: -1, unsortedIndex: -1, groupIndices: { max: -1, min: -1 }, isSorted: false })\n            j += 1\n            k += 1\n        }\n        // console.log(merged)\n        // console.log('...')\n        trace.push({ arrayState: [...sortingArray], currentIndex: -1, comparisonIndex: -1, unsortedIndex: -1, groupIndices: { max: left, min: right }, isSorted: false })\n\n        sortingArray.splice(left, merged.length, ...merged)\n        trace.push({ arrayState: [...sortingArray], currentIndex: -1, comparisonIndex: -1, unsortedIndex: -1, groupIndices: { max: -1, min: -1 }, isSorted: false })\n\n        // console.log(sortingArray)\n        // console.log('...')\n    }\n    const mergeSort = (sortingArray: number[], left: number, right: number) => {\n        if ((right - left) <= 1) {\n        } else {\n\n            const tArray = sortingArray.slice(left, right)\n            const mid: number = Math.round(tArray.length / 2) + left\n            trace.push({ arrayState: [...sortingArray], currentIndex: mid, comparisonIndex: -1, unsortedIndex: -1, groupIndices: { max: -1, min: -1 }, isSorted: false })\n            trace.push({ arrayState: [...sortingArray], currentIndex: mid, comparisonIndex: -1, unsortedIndex: -1, groupIndices: { max: left, min: mid }, isSorted: false })\n\n            // console.log(mid)\n            mergeSort(sortingArray, left, mid)\n            trace.push({ arrayState: [...sortingArray], currentIndex: mid, comparisonIndex: -1, unsortedIndex: -1, groupIndices: { max: mid, min: right }, isSorted: false })\n\n            mergeSort(sortingArray, mid, right)\n            trace.push({ arrayState: [...sortingArray], currentIndex: mid, comparisonIndex: -1, unsortedIndex: -1, groupIndices: { max: left, min: right }, isSorted: false })\n\n            merge(sortingArray, left, mid, right)\n\n        }\n\n    }\n\n    mergeSort(array, 0, array.length);\n    // console.log(array)\n    trace.push({ arrayState: [...array], currentIndex: -1, comparisonIndex: -1, unsortedIndex: -1, groupIndices: { max: -1, min: -1 }, isSorted: true })\n    return trace\n}\n\n// MergeSort([5, 2, 9, 8, 1, 7, 10, 9])\nexport default MergeSort","import * as React from 'react'\nimport { Button } from 'semantic-ui-react'\nimport './style.css'\n\ninterface RangeProps {\n    range: number;\n    size: any;\n    hide: boolean;\n}\n\nconst Range: React.FC<RangeProps> = ({ range, size, hide }) => {\n    const getRange = (n: number) => [...Array(n).keys()]\n    let sizeRange = getRange(range)\n    const rangeStyle = {\n        visibility: hide ? \"hidden\" : \"visible\",\n    } as React.CSSProperties\n    return (\n        <div className=\"chart-range\" style={rangeStyle}>\n            {\n                sizeRange.map((num: number) => {\n                    return (\n                        <Button key={num} size=\"small\" className=\"range-button\" onClick={size}>{num * 10 + 10}</Button>\n                    )\n                })\n            }\n        </div>\n    );\n}\n\nexport default Range","import React from 'react'\nimport { Segment } from 'semantic-ui-react';\nimport './style.css'\n\ninterface BackdropProps {\n}\n\nconst Backdrop: React.FC<BackdropProps> = ({ children }) => {\n    const style = {\n        justifyContent: \"flex-end\",\n        height: \"50vh\"\n    }\n    return (\n        <div>\n            {children}\n        </div>\n    );\n}\n\nexport default Backdrop","import React from 'react'\nimport { Icon } from 'semantic-ui-react'\nimport './style.css'\n\ninterface LegendProps {\n    color?: \"red\" | \"orange\" | \"yellow\" | \"olive\" |\n    \"green\" | \"teal\" | \"blue\" |\n    \"violet\" | \"purple\" | \"pink\" |\n    \"brown\" | \"grey\" | \"black\" | \"white\";\n}\n\nexport const Legend: React.FC<LegendProps> = ({ color = \"white\", children }) => {\n    return (\n\n        <div className=\"legend-icon-container\">\n            {   color === 'white' ? <Icon name=\"square\" className=\"legend-icon\"></Icon> :\n                <Icon name=\"square\" color={color} className=\"legend-icon\"></Icon>\n            }\n            {children}\n        </div>\n    );\n}","import React from 'react'\nimport './style.css'\n\ninterface LegendBarProps {\n\n}\n\nexport const LegendBar: React.FC<LegendBarProps> = ({ children }) => {\n    return (\n\n        <div className=\"legend-bar\">\n            {children}\n        </div>\n    );\n}","import React from 'react'\nimport './style.css'\ninterface ProgressBarProps {\n    width: number;\n}\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({ width }) => {\n\n    const style = () => {\n        let styleObject: { [key: string]: string } = { width: `${width}%` }\n        return styleObject\n    }\n\n\n\n    return (\n\n        <div className=\"progress-bar-container\">\n            <div className=\"progress-bar\" style={style()}>\n\n            </div>\n        </div>\n    );\n}\n\nexport default ProgressBar","import * as React from 'react'\nimport { Button, Container, Divider, Dropdown, Icon, Segment } from 'semantic-ui-react';\nimport Chart from '../../molecules/Chart';\n// import Playbar from '../../molecules/Playbar';\nimport Playbar from '../../molecules/Playbar2';\n\nimport ChartType from '../../../typings/Chart'\nimport useStateWithCallbackLazy from 'use-state-with-callback';\nimport './style.css'\nimport { getRandomArray } from '../../../util/helper';\nimport BubbleSort from '../../../algorithms/BubbleSort'\nimport SelectionSort from '../../../algorithms/SelectionSort';\nimport InsertionSort from '../../../algorithms/InsertionSort'\nimport MergeSort from '../../../algorithms/MergeSort';\nimport Range from '../../atoms/Range';\nimport { DEFAULT_SPEED } from './constants';\nimport Backdrop from '../../atoms/Backdrop';\nimport { Legend } from '../../atoms/Legend';\nimport { LegendBar } from '../../molecules/LegendBar';\nimport ProgressBar from '../../atoms/ProgressBar';\ninterface DynamicChartProps {\n}\n\n\nconst DynamicChart: React.FC<DynamicChartProps> = ({ }) => {\n    const defaultArraySize: number = 10\n    const [arraySize, setArraySize] = React.useState<number>(defaultArraySize)\n    const [hideRange, setHideRange] = React.useState<boolean>(true)\n    const tarray: number[] = getRandomArray(arraySize, 0, 100);\n\n    const [array, setArray] = React.useState<number[]>(tarray)\n    // let array: number[] = [...randomArray]\n    // const randomArray = (): number[] => getRandomArray(30, 0, 100);\n    // const array = [...randomArray()]\n    const [arrayState, setArrayState] = React.useState<number[]>(array)\n    const [currentIndex, setCurrentIndex] = React.useState<number>(0)\n    const [comparisonIndex, setComparisonIndex] = React.useState<number>(0)\n    const [unsortedIndex, setUnsortedIndex] = React.useState<number>(0)\n    const [isSorted, setIsSorted] = React.useState<boolean>(false)\n    const [speed, setSpeed] = React.useState<number>(DEFAULT_SPEED)\n    const [onGoing, setOnGoing] = React.useState<boolean>(false)\n    const [trace, setTrace] = React.useState<{ [key: string]: any }[]>([])\n    const [traceId, setTraceId] = React.useState<number>(0)\n    const [pause, setPause] = React.useState<boolean>(false)\n    const [groupIndices, setGroupIndices] = React.useState<{ max: number, min: number }>({ max: -1, min: -1 })\n\n    const getAlgorithmName = (name: string) => {\n        return (\n            <span><span className=\"algorithm-name\">{name}</span> SORT</span>\n        )\n    }\n    const [algorithm, setAlgorithm] = React.useState<any>({ name: (getAlgorithmName(\"BUBBLE\")), func: BubbleSort })\n    // const [count, setCount] = useStateWithCallbackLazy(0, (count: number) => {\n    //     if (count > 0 && isSorted === false) {\n    //         const timer = setTimeout(BubbleSort, speed, arrayState, traceObject)\n    //         return () => clearTimeout(timer)\n    //     } else {\n    //         setOnGoing(false)\n    //     }\n    // })\n\n    const [count, setCount] = useStateWithCallbackLazy(0, (count: number) => {\n        if (count > 0 && isSorted === false) {\n            if (trace.length > 0 && traceId <= trace.length - 1) {\n                const timer = setTimeout(changeVisualState, speed, trace[traceId])\n                return () => clearTimeout(timer)\n            }\n        }\n        else {\n            if (pause) {\n                setOnGoing(false)\n            } else {\n                setOnGoing(false)\n            }\n        }\n    })\n\n\n    const changeVisualState = (traceObject: { [key: string]: any }) => {\n        console.log(traceObject)\n        setCurrentIndex(traceObject.currentIndex)\n        setComparisonIndex(traceObject.comparisonIndex)\n        setGroupIndices(traceObject.groupIndices)\n        setUnsortedIndex(traceObject.unsortedIndex)\n        setArrayState([...traceObject.arrayState])\n        setIsSorted(traceObject.isSorted)\n        setTraceId(traceId + 1)\n\n\n    }\n\n\n    const increaseSpeed = () => {\n        setSpeed(speed / 2)\n    }\n\n    const decreaseSpeed = () => {\n        setSpeed(speed * 2)\n    }\n    const generateNewArray = () => {\n        const newArray: number[] = getRandomArray(arraySize, 0, 100)\n        setArray([...newArray])\n        setArrayState(newArray)\n        setIsSorted(false)\n        setOnGoing(false)\n        setCurrentIndex(0)\n        setComparisonIndex(0)\n        setUnsortedIndex(0)\n        setSpeed(speed)\n        setTraceId(0)\n        setTrace([])\n        setPause(false)\n        setCount(0)\n\n    }\n\n\n\n    const sortRun = () => {\n        setOnGoing(true)\n        setPause(false)\n        setHideRange(true)\n        if (!(trace.length > 0)) {\n            const trace: { [key: string]: any }[] = algorithm.func([...arrayState])\n            setTrace([...trace])\n        }\n        setCount(count + 1)\n    }\n\n    // const sortRun = () => {\n    //     console.log(arrayState)\n\n    //     let sortRunArray: number[] = [...arrayState];\n    //     for (let i = 1; i < sortRunArray.length; i++) {\n\n    //         if (sortRunArray[i - 1] > sortRunArray[i]) {\n    //             setTimeout(sortStep, 1000, i - 1, i)\n    //             sortRunArray = [...arrayState]\n    //             // [sortRunArray[i - 1], sortRunArray[i]] = [sortRunArray[i], sortRunArray[i - 1]];\n\n    //         } else {\n    //             sortRunArray = [...arrayState]\n    //         }\n    //     }\n\n    //     setArrayState([...sortRunArray])\n    // }\n\n    const pauseSorting = () => {\n        setPause(true)\n        setCount(0)\n    }\n\n    const getSortedState = () => {\n        const sortedArray = [...arrayState].sort((a, b) => a - b)\n        setArrayState(sortedArray)\n        setIsSorted(true)\n        setOnGoing(false)\n        setCurrentIndex(0)\n        setComparisonIndex(0)\n        setUnsortedIndex(0)\n        setCount(0)\n        setSpeed(speed)\n        setTraceId(sortedArray.length)\n\n    }\n\n    const getOriginalState = () => {\n        setArrayState([...array])\n        setIsSorted(false)\n        setOnGoing(false)\n        setCurrentIndex(0)\n        setComparisonIndex(0)\n        setUnsortedIndex(0)\n        setCount(0)\n        setSpeed(DEFAULT_SPEED)\n        setTraceId(0)\n\n    }\n\n    const hideRangeFunction = () => {\n        if (hideRange) {\n            setHideRange(false)\n        } else {\n            setHideRange(true)\n        }\n    }\n\n    const changeArraySize = (_: React.SyntheticEvent, data: any) => {\n        setArraySize(data.children)\n        const newArray: number[] = getRandomArray(data.children, 0, 100)\n        setArray([...newArray])\n        setArrayState(newArray)\n        setIsSorted(false)\n        setOnGoing(false)\n        setCurrentIndex(0)\n        setComparisonIndex(0)\n        setUnsortedIndex(0)\n        setSpeed(speed)\n        setTraceId(0)\n        setTrace([])\n        setPause(pause ? false : true)\n        setCount(0)\n\n    }\n\n\n    const options = [{ value: \"Bubble Sort\", key: \"bubble\", text: \"Bubble Sort\" },\n    { value: \"Insertion Sort\", key: \"insertionSort\", text: \"Insertion Sort\" }, { value: \"Selection Sort\", key: \"selectionSort\", text: \"Selection Sort\" },\n    { value: \"Merge Sort\", key: \"mergeSort\", text: \"Merge Sort\" }]\n\n    const selectAlgorithm = (_: React.SyntheticEvent, data: any) => {\n\n        if (data.value === \"Bubble Sort\") {\n            setAlgorithm({ name: getAlgorithmName(\"BUBBLE\"), func: BubbleSort })\n        } else if (data.value === \"Insertion Sort\") {\n            setAlgorithm({ name: getAlgorithmName(\"INSERTION\"), func: InsertionSort })\n        } else if (data.value === \"Selection Sort\") {\n            setAlgorithm({ name: getAlgorithmName(\"SELECTION\"), func: SelectionSort })\n        } else if (data.value === \"Merge Sort\") {\n            setAlgorithm({ name: getAlgorithmName(\"MERGE\"), func: MergeSort })\n        } else {\n            setAlgorithm({ name: getAlgorithmName(\"BUBBLE\"), func: BubbleSort })\n        }\n        setTrace([])\n\n        getOriginalState()\n    }\n\n    return (\n        <>\n            <Container fluid className=\"chart-container\">\n\n                <div className=\"sort-selection\">\n\n                    <Dropdown\n                        text={algorithm.name}\n                        icon='dropdown'\n                        floating\n                        labeled\n                        disabled={onGoing && true}\n                        className='icon'\n                    >\n                        <Dropdown.Menu>\n                            <Dropdown.Header content='Algorithms' />\n                            {options.map((option) => (\n                                <Dropdown.Item onClick={selectAlgorithm} {...option} />\n                            ))}\n\n                        </Dropdown.Menu>\n                    </Dropdown>\n                    <LegendBar>\n                        <Legend color=\"green\"><span>Current Index</span></Legend>\n                        <Legend color=\"yellow\"><span>Comparison Index</span></Legend>\n                        <Legend><span>Default</span></Legend>\n\n                    </LegendBar>\n\n                </div>\n\n                <Backdrop>\n                    <Chart array={arrayState} highlightIndex={currentIndex} comparisonIndex={comparisonIndex}\n                        onGoing={onGoing} onPause={pause} groupIndices={groupIndices} />\n                    <ProgressBar width={onGoing || pause ? (100 / trace.length) * traceId : 0}></ProgressBar>\n                    <Range range={10} size={changeArraySize} hide={hideRange} />\n                </Backdrop>\n            </Container>\n            <Playbar getOriginalState={getOriginalState} getSortedState={getSortedState} isSorted={isSorted}\n                onPause={pause} onGoing={onGoing} decreaseSpeed={decreaseSpeed} increaseSpeed={increaseSpeed}\n                generateNewArray={generateNewArray} sortArray={sortRun} pauseSorting={pauseSorting} arraySize={arraySize}\n                setHideRange={hideRangeFunction}></Playbar>\n\n        </>\n    );\n}\n\nexport default DynamicChart\n\n    // < div className = \"button-area\" >\n    //     <Button.Group icon>\n\n    //         <Button type=\"reset\" onClick={resetState} color=\"green\" style={{ marginTop: '1rem' }} ><Icon name='refresh' /></Button>\n    //         <Button type=\"submit\" onClick={getOriginalState} color=\"green\" style={{ marginTop: '1rem' }}><Icon name='fast backward' /></Button>\n\n    //         <Button type=\"submit\" onClick={decreaseSpeed} color=\"green\" style={{ marginTop: '1rem' }} disabled={isSorted}><Icon name='step backward' /></Button>\n\n    //         {!onGoing ? <Button type=\"submit\" onClick={sortArray} color=\"green\" style={{ marginTop: '1rem' }} disabled={isSorted || onGoing}><Icon name='play' /></Button> :\n    //             <Button type=\"submit\" onClick={pauseSorting} color=\"red\" style={{ marginTop: '1rem' }} ><Icon name='pause' /></Button>}\n\n    //         <Button type=\"submit\" onClick={increaseSpeed} color=\"green\" style={{ marginTop: '1rem' }} disabled={isSorted}><Icon name='step forward' /></Button>\n    //         <Button type=\"submit\" onClick={getSortedState} color=\"green\" style={{ marginTop: '1rem' }} disabled={isSorted}><Icon name='fast forward' /></Button>\n\n    //     </Button.Group>\n    //         </div >\n","export const DEFAULT_SPEED: number = 1000","import * as React from 'react'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container, Grid, Image, Placeholder, Segment } from 'semantic-ui-react'\nimport Backdrop from './components/atoms/Backdrop';\nimport { Bar } from './components/atoms/Bar';\nimport './App.css'\nimport { getRandomArray } from './util/helper';\nimport DynamicChart from './components/organisms/DynamicChart';\n\ninterface AppProps {\n\n}\n\nexport const App: React.FC<AppProps> = ({ }) => {\n\n\n    return (\n\n        <Grid stackable centered columns={12}>\n            <Grid.Row centered columns={1}>\n                <Grid.Column>\n\n                    <DynamicChart />\n                    {/* <Segment placeholder>\n\n                        </Segment> */}\n                </Grid.Column>\n\n            </Grid.Row>\n            <Grid.Row centered columns={12}>\n\n            </Grid.Row>\n\n        </Grid>\n\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}